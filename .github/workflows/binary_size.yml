name: Binary Size Analysis

on:
  issue_comment:
    types: [created, edited]
  workflow_dispatch:

jobs:
  parse-command:
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      chip: ${{ steps.parse.outputs.chip }}
      target: ${{ steps.parse.outputs.target }}
      example_path: ${{ steps.parse.outputs.example_path }}
      binary_name: ${{ steps.parse.outputs.binary_name }}
      should-run: ${{ steps.parse.outputs.should-run }}
    steps:
      - name: Parse slash command
        id: parse
        run: |
          COMMENT="${{ github.event.comment.body }}"
          
          # Check for valid commands
          if [[ $COMMENT =~ ^/test-size ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            
            # Default values
            CHIP="esp32c6"
            TARGET="riscv32imac-unknown-none-elf"
            EXAMPLE_PATH="qa-test"
            BINARY_NAME="sleep_timer"
            
            # Parse parameters from comment
            if [[ $COMMENT =~ chip=([a-zA-Z0-9]+) ]]; then
              CHIP="${BASH_REMATCH[1]}"
            fi
            
            if [[ $COMMENT =~ target=([a-zA-Z0-9_-]+) ]]; then
              TARGET="${BASH_REMATCH[1]}"
            else
              # Auto-detect target based on chip
              case $CHIP in
                esp32c6|esp32c2) TARGET="riscv32imac-unknown-none-elf" ;;
                esp32c3) TARGET="riscv32imc-unknown-none-elf" ;;
                esp32s3) TARGET="xtensa-esp32s3-espidf" ;;
                esp32s2) TARGET="xtensa-esp32s2-espidf" ;;
                esp32) TARGET="xtensa-esp32-espidf" ;;
              esac
            fi
            
            if [[ $COMMENT =~ example_path=([a-zA-Z0-9_-]+) ]]; then
              EXAMPLE_PATH="${BASH_REMATCH[1]}"
            fi
            
            if [[ $COMMENT =~ binary_name=([a-zA-Z0-9_-]+) ]]; then
              BINARY_NAME="${BASH_REMATCH[1]}"
            fi
            
            echo "chip=$CHIP" >> $GITHUB_OUTPUT
            echo "target=$TARGET" >> $GITHUB_OUTPUT
            echo "example_path=$EXAMPLE_PATH" >> $GITHUB_OUTPUT
            echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
            
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

  binary_size:
    needs: parse-command
    if: ${{ needs.parse-command.outputs.should-run == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      actions: read
      pull-requests: write
    
    env:
      CHIP: ${{ needs.parse-command.outputs.chip }}
      TARGET: ${{ needs.parse-command.outputs.target }}
      EXAMPLE_PATH: ${{ needs.parse-command.outputs.example_path }}
      BINARY_NAME: ${{ needs.parse-command.outputs.binary_name }}
    
    steps:
      - name: Show parameters
        run: |
          echo "Chip: ${{ env.CHIP }}"
          echo "Target: ${{ env.TARGET }}"
          echo "Example Path: ${{ env.EXAMPLE_PATH }}"
          echo "Binary Name: ${{ env.BINARY_NAME }}"
          echo "PR Number: ${{ github.event.issue.number }}"

      # Install toolchains based on target
      - uses: esp-rs/xtensa-toolchain@v1.6
        if: ${{ contains(env.TARGET, 'xtensa') }}
        with:
          version: 1.90.0.0

      - uses: dtolnay/rust-toolchain@v1
        if: ${{ contains(env.TARGET, 'riscv') }}
        with:
          target: ${{ env.TARGET }}
          toolchain: stable
          components: rust-src, llvm-tools

      - name: Install cargo-binutils
        run: cargo install cargo-binutils

      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.issue.pull_request.head.sha }}
          fetch-depth: 0

      # Build current PR binary
      - name: Build current PR binary
        working-directory: ./${{ env.EXAMPLE_PATH }}
        run: |
          cargo build --release --bin ${{ env.BINARY_NAME }} --features ${{ env.CHIP }} --target ${{ env.TARGET }}

      - name: Get current binary size
        id: current-size
        working-directory: ./${{ env.EXAMPLE_PATH }}
        run: |
          echo "size_output<<EOF" >> $GITHUB_OUTPUT
          cargo size --bin ${{ env.BINARY_NAME }} --release --features ${{ env.CHIP }} --target ${{ env.TARGET }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Save current binary
        run: |
          cp ./${{ env.EXAMPLE_PATH }}/target/${{ env.TARGET }}/release/${{ env.BINARY_NAME }} ./${{ env.EXAMPLE_PATH }}/target/${{ env.TARGET }}/release/current_${{ env.CHIP }}.elf

      # Build base commit binary for comparison
      - name: Checkout base commit
        run: |
          git checkout ${{ github.event.issue.pull_request.base.sha }}

      - name: Build base binary
        working-directory: ./${{ env.EXAMPLE_PATH }}
        run: |
          cargo build --release --bin ${{ env.BINARY_NAME }} --features ${{ env.CHIP }} --target ${{ env.TARGET }}
          mv ./target/${{ env.TARGET }}/release/${{ env.BINARY_NAME }} ./target/${{ env.TARGET }}/release/base_${{ env.CHIP }}.elf

      - name: Run Bloaty comparison
        id: bloaty-comparison
        uses: carlosperate/bloaty-action@v1
        with:
          bloaty-args: ./${{ env.EXAMPLE_PATH }}/target/${{ env.TARGET }}/release/base_${{ env.CHIP }}.elf -- ./${{ env.EXAMPLE_PATH }}/target/${{ env.TARGET }}/release/current_${{ env.CHIP }}.elf
          output-to-summary: true

      - name: Add PR comment with results
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const sizeOutput = `${{ steps.current-size.outputs.size_output }}`;
            const bloatyOutput = `${{ steps.bloaty-comparison.outputs.bloaty-output-encoded }}`;
            const chip = `${{ env.CHIP }}`;
            const target = `${{ env.TARGET }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Binary Size Analysis (${chip} - ${target})\n\n### Current PR Size:\n\`\`\`\n${sizeOutput}\n\`\`\`\n\n### Size Difference vs Base:\n\`\`\`\n${bloatyOutput}\n\`\`\`\n`
            })